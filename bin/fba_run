#!/usr/bin/env python
"""
Main fiber assignment entry point
"""
import os

import argparse

import datetime

import desimodel.io

from fiberassign.utils import GlobalTimers

from fiberassign.hardware import load_hardware

from fiberassign.tiles import load_tiles

from fiberassign.gfa import get_gfa_targets

from fiberassign.targets import (str_to_target_type, TARGET_TYPE_SCIENCE,
                                 TARGET_TYPE_SKY, TARGET_TYPE_STANDARD,
                                 TARGET_TYPE_SAFE, Targets, TargetsAvailable,
                                 TargetTree, FibersAvailable,
                                 load_target_file)

from fiberassign.assign import (Assignment, write_assignment_fits)


def main():
    parser = argparse.ArgumentParser()

    parser.add_argument("--targets", type=str, required=True, action="append",
                        help="Input file with targets of any type.  This "
                        "argument can be specified multiple times (for "
                        "example if standards / skies / science targets are "
                        "in different files).  By default, the DESI_TARGET "
                        "column and bitfield values defined in desitarget "
                        "are used to determine the type of each target.  "
                        "Each filename may be optionally followed by comma "
                        "separated values that will be passed to the "
                        "arguments of the load_target_file() function.  "
                        "See docs for details.")

    parser.add_argument("--gfafile", type=str, required=False, default=None,
                        help="Optional GFA targets FITS file")

    parser.add_argument("--footprint", type=str, required=False, default=None,
                        help="Optional FITS file defining the footprint.  If"
                        " not specified, the default footprint from desimodel"
                        " is used.")

    parser.add_argument("--tiles", type=str, required=False, default=None,
                        help="Optional text file containing a subset of the"
                        " tile IDs to use in the footprint, one ID per line."
                        " Default uses all tiles in the footprint.")

    parser.add_argument("--positioners", type=str, required=False,
                        default=None,
                        help="Optional FITS file describing the fiber "
                        "positioner locations.  Default uses the file from "
                        "desimodel.")

    parser.add_argument("--status", type=str, required=False, default=None,
                        help="Optional fiber status file in astropy ECSV "
                        "format.  Default treats all fibers as good.")

    parser.add_argument("--rundate", type=str, required=False, default=None,
                        help="Optional date to simulate for this run of "
                        "fiber assignment, used with the fiber status file "
                        "to determine which fibers currently have problems.  "
                        "Default uses the current date.  Format is "
                        "YYYY-MM-DD or YYYY-MM-DDTHH:mm:ss in UTC time.")

    parser.add_argument("--dir", type=str, required=False, default=None,
                        help="Output directory.")

    parser.add_argument("--prefix", type=str, required=False,
                        default="fiberassign_",
                        help="Prefix of each file (before the <tile>.fits).")

    parser.add_argument("--split", required=False, default=False,
                        action="store_true",
                        help="Split output into tile prefix directories.")

    parser.add_argument("--standards_per_petal", type=int, required=False,
                        default=10, help="Required number of standards per"
                        " petal")

    parser.add_argument("--sky_per_petal", type=int, required=False,
                        default=40, help="Required number of sky targets per"
                        " petal")

    parser.add_argument("--write_all_targets", required=False, default=False,
                        action="store_true",
                        help="When writing target properties, write data "
                        "for all available targets, not just those which are "
                        "assigned.  This is convenient, but increases the "
                        "write time and the file size.")

    args = parser.parse_args()

    # Get run date
    rundate = args.rundate
    if rundate is None:
        rundate = datetime.datetime.now()
    else:
        rundate = datetime.datetime.fromisoformat(args.rundate)

    # Set output directory
    out_dir = args.dir
    if out_dir is None:
        rdstr = rundate.isoformat("T", "seconds")
        out_dir = "out_fiberassign_{}".format(rdstr)

    # Read hardware properties
    hw = load_hardware(fiberpos_file=args.positioners, rundate=args.rundate,
                       status_file=args.status)

    # Read tiles we are using
    tileselect = None
    if args.tiles is not None:
        tileselect = list()
        with open(args.tiles, "r") as f:
            for line in f:
                # Try to convert the first column to an integer.
                try:
                    tileselect.append(int(line.split()[0]))
                except ValueError:
                    pass
    tiles = load_tiles(hw, tiles_file=args.footprint, select=tileselect)

    # Create empty target list
    tgs = Targets()

    # Append each input target file
    for tgarg in args.targets:
        tgprops = tgarg.split(",")
        tgfile = tgprops[0]
        typeforce = None
        if len(tgprops) > 1:
            # we are forcing the target type for this file
            typeforce = str_to_target_type(tgprops[1])
        load_target_file(tgs, tgfile, typeforce=typeforce)

    # Create a hierarchical triangle mesh lookup of the targets positions
    tree = TargetTree(tgs)

    # Compute the targets available to each fiber for each tile.
    tgsavail = TargetsAvailable(tgs, tiles, tree)

    # Free the tree
    del tree

    # Compute the fibers on all tiles available for each target and sky
    favail = FibersAvailable(tgsavail)

    # Create assignment object
    asgn = Assignment(tgs, tgsavail, favail)

    # First-pass assignment of science targets
    asgn.assign_unused(TARGET_TYPE_SCIENCE)

    # Redistribute science targets across available petals
    asgn.redistribute_science()

    # Assign standards, 10 per petal
    asgn.assign_unused(TARGET_TYPE_STANDARD, args.standards_per_petal)
    asgn.assign_force(TARGET_TYPE_STANDARD, args.standards_per_petal)

    # Assign sky to unused fibers, up to 40 per petal
    asgn.assign_unused(TARGET_TYPE_SKY, args.sky_per_petal)
    asgn.assign_force(TARGET_TYPE_SKY, args.sky_per_petal)

    # If there are any unassigned fibers, try to place them somewhere.
    asgn.assign_unused(TARGET_TYPE_SCIENCE)
    asgn.assign_unused(TARGET_TYPE_SKY)

    # NOTE:  This was removed since we are treating BAD_SKY as science targets
    # with very low priority.
    #
    # # Assign safe location to unused fibers (no maximum).  There should
    # # always be at least one safe location (i.e. "BAD_SKY") for each fiber.
    # # So after this is run every fiber should be assigned to something.
    # asgn.assign_unused(TARGET_TYPE_SAFE)

    # Make sure that output directory exists
    if not os.path.isdir(out_dir):
        os.makedirs(out_dir)

    # Optionally get GFA targets
    gfa_targets = None
    if args.gfafile is not None:
        gfa_targets = get_gfa_targets(tiles, args.gfafile)

    # Write output
    write_assignment_fits(tiles, asgn, out_dir=out_dir,
                          out_prefix=args.prefix, split_dir=args.split,
                          all_targets=args.write_all_targets,
                          gfa_targets=gfa_targets)

    gt = GlobalTimers.get()
    gt.report()

    return


if __name__ == "__main__":
    main()
