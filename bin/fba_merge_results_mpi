#!/usr/bin/env python
"""
Merge fiberassign results with input target files.
"""
from mpi4py import MPI

import os
import sys

import traceback

import argparse

import numpy as np

from fiberassign.assign import merge_results, result_tiles


def main():
    parser = argparse.ArgumentParser()

    parser.add_argument("--targets", type=str, required=True, action="append",
                        help="Input file with targets of any type.  This "
                        "argument can be specified multiple times (for "
                        "example if standards / skies / science targets are "
                        "in different files).")

    parser.add_argument("--dir", type=str, required=True, default=None,
                        help="Directory containing fiberassign results.")

    parser.add_argument("--prefix", type=str, required=False,
                        default="fiberassign_",
                        help="Prefix of each file (before the <tile>.fits).")

    parser.add_argument("--split", required=False, default=False,
                        action="store_true",
                        help="Results are in tile prefix directories.")

    parser.add_argument("--out", type=str, required=False, default=None,
                        help="Output directory for the merged files.  Default"
                        " is the directory containing the fiberassign output.")

    parser.add_argument("--out_prefix", type=str, required=False,
                        default="tile-",
                        help="Prefix of each output file.")

    parser.add_argument("--out_split", required=False, default=False,
                        action="store_true",
                        help="Split output into tile prefix directories.")

    parser.add_argument("--columns", type=str, required=False, default=None,
                        help="Override the column names of target data to be "
                        "copied from the target files into the fiber "
                        "assignment files.  This should be a comma-separated "
                        "list.")

    args = parser.parse_args()

    # Check directory
    if not os.path.isdir(args.dir):
        raise RuntimeError("Results directory {} does not exist"
                           .format(args.dir))

    # Check columns
    columns = None
    if args.columns is not None:
        coltest = args.columns.split(",")
        columns = [x for x in coltest if x != "TARGETID"]

    tiles = result_tiles(dir=args.dir, prefix=args.prefix)

    comm = MPI.COMM_WORLD
    ptiles = np.array_split(tiles, comm.size)[comm.rank]

    if len(ptiles) > 0:
        print("proc {} doing {} tiles".format(comm.rank, len(ptiles)),
              flush=True)
        merge_results(args.targets, ptiles, result_dir=args.dir,
                      result_prefix=args.prefix, out_dir=args.out,
                      out_prefix=args.out_prefix, columns=columns)
    return


if __name__ == "__main__":
    try:
        main()
    except:
        exc_type, exc_value, exc_traceback = sys.exc_info()
        lines = traceback.format_exception(exc_type, exc_value, exc_traceback)
        lines = ["Proc {}: {}".format(MPI.COMM_WORLD.rank, x) for x in lines]
        print("".join(lines), flush=True)
        MPI.COMM_WORLD.Abort()
