#!/usr/bin/env python

"""
Wrapper script for fba_run and fba_merge to provide script API compatibility
with the legacy branch of fiberassign.
"""

import argparse

import fiberassign

from fiberassign.utils import Logger, option_list

from fiberassign.scripts.run import (parse_survey, run_survey_full)

from fiberassign.scripts.merge import (parse_merge, run_merge)


parser = argparse.ArgumentParser()

parser.add_argument("--mtl",
                    help="input targets (FITS file)", required=True)

parser.add_argument("--sky",
                    help="input sky positions (FITS file)", required=True)

parser.add_argument("--stdstar",
                    help="input std stars (FITS file)")

parser.add_argument("--fibstatusfile",
                    help="list of positioners and its status "
                    "(ECSV or txt file)")

parser.add_argument("--footprint",
                    help="list of tiles defining the footprint (FITS file)")

parser.add_argument("--positioners",
                    help="list of positioners on the focal plane (FITS file)")

parser.add_argument("--surveytiles",
                    help="set of tiles to run fiberassign on (text file)")

parser.add_argument("--outdir",
                    help="output directory (default = ./)", default="./")

parser.add_argument("--starmask",
                    help="integer mask defining standard stars")

parser.add_argument("--rundate", help="run date [YYYY-MM-DD]")

parser.add_argument("--gfafile", help="GFA file (FITS tile)")

parser.add_argument("--nstarpetal",
                    help="number of standard stars per petal (default=10)",
                    default=10)

parser.add_argument("--nskypetal",
                    help="number of sky fibers per petal (default=40)",
                    default=40)

parser.add_argument("--overwrite", action="store_true",
                    help="overwrite pre-existing output files")

parser.add_argument("--version", help="Print code version and exit",
                    action='version', version=fiberassign.__version__)

args = parser.parse_args()
log = Logger.get()

# ------
# - fba_run

opts = {
    "targets": [args.mtl, args.sky, args.stdstar],
    "dir": args.outdir,
    "standards_per_petal": args.nstarpetal,
    "sky_per_petal": args.nskypetal
}

# Completely optional; only propagate if specified
if args.fibstatusfile is not None:
    opts["status"] = args.fibstatusfile

if args.footprint is not None:
    opts["footprint"] = args.footprint

if args.positioners is not None:
    opts["positioners"] = args.positioners

if args.surveytiles is not None:
    opts["tiles"] = args.surveytiles

if args.starmask is not None:
    opts["stdmask"] = args.starmask

if args.rundate is not None:
    opts["rundate"] = args.rundate

if args.gfafile is not None:
    opts["gfafile"] = args.gfafile

if args.overwrite:
    opts["overwrite"] = True

optlist = option_list(opts)
survey_args = parse_survey(optlist)
run_survey_full(survey_args)

# ------
# - fba_merge_results

opts = {
    "targets": [args.mtl, args.sky, args.stdstar],
    "dir": args.outdir,
    "out": args.outdir
}

optlist = option_list(opts)
merge_args = parse_merge(optlist)
run_merge(merge_args)
