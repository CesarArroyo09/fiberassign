#!/usr/bin/env python

"""
Script handling fiberassign inputs
"""

import sys, os
import argparse
import desimodel.io
import numpy as np
import datetime
from desitarget.targetmask import desi_mask
from astropy.table import Table
import fitsio
import glob
import desimodel.focalplane
import tempfile
import shutil


parser = argparse.ArgumentParser()
parser.add_argument("--mtl", type=str,  help="input targets (FITS file)", required=True)
parser.add_argument("--sky", type=str,  help="input sky positions (FITS file)", required=True)
parser.add_argument("--stdstar", type=str,  help="input std stars (FITS file)", required=True)
parser.add_argument("--fibstatusfile", type=str,  help="list of positioners and its status (ECSV file)", required=True)
parser.add_argument("--footprint", type=str,  help="list of tiles defining the footprint (FITS file)")
parser.add_argument("--positioners", type=str,  help="list of positioners on the focal plane (FITS file)")


parser.add_argument("--surveytiles", type=str,  help="set of tiles to run fiberassign on (text file)")

parser.add_argument("--telra", type=float, help="Right Ascension of arbitrary pointing - overrides --surveytiles")
parser.add_argument("--teldec", type=float, help="Declination of arbitrary pointing - overrides --surveytiles")
parser.add_argument("--tileid", type=int, help="Integer ID of arbitrary pointing - overrides --surveytiles")
parser.add_argument("--tileobsconditions", type=int, help="Mask describing observing program (DARK:1, GRAY:2, BRIGHT:4) - overrides --surveytiles")

parser.add_argument("--outdir", type=str,  help="output directory", default="./")
parser.add_argument("--starmask", type=int,  help="integer mask defining standard stars")
parser.add_argument("--rundate", type=str,  help="run date [YYYY-MM-DD]")
parser.add_argument("--gfafile", type=str, help="GFA file (FITS tile)")

parser.add_argument("--nocleanup", dest='cleanup', action='store_false')

args = parser.parse_args()


if args.footprint is None:
    args.footprint =  desimodel.io.findfile('footprint/desi-tiles.fits')

if args.positioners is None:
    args.positioners = desimodel.io.findfile('focalplane/fiberpos-all.fits')

if args.surveytiles is None:
    data = desimodel.io.load_tiles()
    np.savetxt(os.path.join(args.outdir, "tmp_surveytiles.txt"), np.int_(data['TILEID']), fmt='%d')
    args.surveytiles = os.path.join(args.outdir, "tmp_surveytiles.txt")

if args.starmask is None:
    args.starmask = (desi_mask.STD_FSTAR | desi_mask.STD_BRIGHT | desi_mask.STD_WD)

if args.rundate is None:
    now = datetime.datetime.now()
    args.rundate = '{:04d}-{:02d}-{:02d}'.format(now.year, now.month, now.day)

if (args.telra is not None) and (args.teldec is not None) and (args.tileid is not None) and (args.tileobsconditions is not None):
    from astropy.table import Table
    tiles = Table([[args.tileid], [args.telra], [args.teldec], [args.tileobsconditions], [1], [1]],
                  names=('TILEID', 'RA', 'DEC', 'OBSCONDITIONS', 'IN_DESI', 'PASS'))
    tiles.write(os.path.join(args.outdir, "tmp_footprint.fits"), overwrite=True)
    args.footprint = os.path.join(args.outdir, "tmp_footprint.fits")
    np.savetxt(os.path.join(args.outdir, "tmp_surveytiles.txt"), [args.tileid], fmt='%d')
    args.surveytiles = os.path.join(args.outdir, "tmp_surveytiles.txt")

# Make sure that output directory exists
if not os.path.isdir(args.outdir):
    os.makedirs(args.outdir)


def is_file_missing(filename):
    if not os.path.exists(filename):
        print('ERROR: file {} does not exist'.format(filename))
        sys.exit(1)

# Check if output files already exist
def check_existing_files(checkdir):
    existing_files = False
    with open(args.surveytiles) as survey:
        for line in survey:
            line = line.strip()
            if line.startswith('#') or len(line)<2:
                continue
            tileid = int(line)
            tilefile = os.path.join(checkdir, 'tile_{:05d}.fits'.format(tileid))
            if os.path.exists(tilefile):
                existing_files = True
                print('ERROR: {} already exists'.format(tilefile))

    if existing_files:
        print('Remove pre-existing tile files or specify different --outdir')
        sys.exit(1)

def rewrite_fiberpos(fiberpos_fits_file, postype='POS'):
    data = Table.read(fiberpos_fits_file)
    data = data[data['DEVICE_TYPE']==postype]
    data = data[['FIBER', 'LOCATION', 'SPECTRO', 'X', 'Y', 'Z']]
    txtposfilename = os.path.join(args.outdir,"tmp_{}_pos.txt".format(postype))
    np.savetxt(txtposfilename, np.array(data).T, fmt='%d\t %d\t %d\t %f\t %f\t %f')
    return txtposfilename

#checks that all files exist
is_file_missing(args.mtl)
is_file_missing(args.sky)
is_file_missing(args.stdstar)
is_file_missing(args.fibstatusfile)
is_file_missing(args.surveytiles)
is_file_missing(args.footprint)
if args.gfafile is not None:
    is_file_missing(args.gfafile)



# tmp fiberpos
tmp_fiber_pos = rewrite_fiberpos(args.positioners)
tmp_fiber_sky = rewrite_fiberpos(args.positioners, postype='ETC')

# tmp output directories
tmp_targets_dir = tempfile.mkdtemp()
tmp_sky_dir = tempfile.mkdtemp()
tmp_gfa_dir = tempfile.mkdtemp()

if not os.path.exists(tmp_targets_dir):
    os.makedirs(tmp_targets_dir)

if not os.path.exists(tmp_sky_dir):
    os.makedirs(tmp_sky_dir)

if not os.path.exists(tmp_gfa_dir):
    os.makedirs(tmp_gfa_dir)

check_existing_files(args.outdir)
check_existing_files(tmp_targets_dir)
check_existing_files(tmp_sky_dir)
check_existing_files(tmp_gfa_dir)

fiberassign_command ="fiberassign_exec --mtl {mtl}  --sky {sky} --stdstar {stdstar}  --fibstatusfile {fiberstatusfile}  \
            --outdir {outdir} \
            --surveytiles {surveytiles}  \
            --footprint {footprint}  \
            --positioners {positioners} \
            --starmask {starmask} \
            --rundate {rundate}"

# fiberassign targets
cmd = fiberassign_command.format(mtl=args.mtl, sky=args.sky, stdstar=args.stdstar, fiberstatusfile=args.fibstatusfile,
                                 outdir=tmp_targets_dir, surveytiles=args.surveytiles, starmask = args.starmask,
                                 footprint=args.footprint, positioners=tmp_fiber_pos, rundate=args.rundate)
print(cmd)
os.system(cmd)

#fiberassign sky
cmd = fiberassign_command.format(mtl=args.sky, sky=args.sky, stdstar=args.sky, fiberstatusfile=args.fibstatusfile,
                                 outdir=tmp_sky_dir, surveytiles=args.surveytiles, starmask = args.starmask,
                                 footprint=args.footprint, positioners=tmp_fiber_sky, rundate=args.rundate)
print(cmd)
os.system(cmd)

# join targets+sky+gfa tiles

targets = glob.glob(os.path.join(tmp_targets_dir,'tile_*.fits'))
skys = glob.glob(os.path.join(tmp_sky_dir,'tile_*.fits'))


sky_tile_id = {}
for sky_file in skys:
    f = sky_file.split('/')[-1]
    fileid = f.split("_")[-1]
    fileid = fileid[:-5]
    sky_tile_id[fileid] = sky_file

target_tile_id = {}
tile_id = []
for target_file in targets:
    f = target_file.split('/')[-1]
    fileid = f.split("_")[-1]
    fileid = fileid[:-5]
    target_tile_id[fileid] = target_file
    tile_id.append(int(fileid))

# compute GFA
if args.gfafile is not None:
    from desimodel.focalplane import GFALocations
    gfa = GFALocations()

    print('loading GFA file')
    data = fitsio.read(args.gfafile, columns=['RA', 'DEC', 'TARGETID'])

    print('selecting computed tiles')
    footprint = fitsio.read(args.footprint)
    ii = np.in1d(footprint['TILEID'], np.array(tile_id))
    tiles = footprint[ii]

    for telra, teldec, tileid in zip(tiles['RA'], tiles['DEC'], tiles['TILEID']):
        gfaout = os.path.join(tmp_gfa_dir, 'tile_{:05d}.fits'.format(tileid))
        gfa_data = gfa.targets_on_gfa(telra, teldec, data)
        t = Table(gfa_data)
        t.write(gfaout, overwrite=True)

    gfas = glob.glob(os.path.join(tmp_gfa_dir,'tile_*.fits'))
    gfa_tile_id = {}
    for gfa_file in gfas:
        f = gfa_file.split('/')[-1]
        fileid = f.split("_")[-1]
        fileid = fileid[:-5]
        gfa_tile_id[fileid] = gfa_file

for sky_id in sky_tile_id.keys():
    if sky_id in target_tile_id.keys():
            print('rewriting tilefile for tileid {}'.format(sky_id))
            sky_data = fitsio.read(sky_tile_id[sky_id])
            fiber_data = fitsio.read(target_tile_id[sky_id], ext=1)
            potential_data = fitsio.read(target_tile_id[sky_id], ext=2)

            tileout = os.path.join(args.outdir, 'tile_{}.fits'.format(sky_id))
            fitsio.write(tileout, fiber_data, extname='FIBERASSIGN', clobber=True)
            fitsio.write(tileout, potential_data, extname='POTENTIAL')
            fitsio.write(tileout, sky_data, extname='SKYETC')

            if args.gfafile is not None:
                print(gfa_tile_id[sky_id])
                gfa_data = fitsio.read(gfa_tile_id[sky_id])
                fitsio.write(tileout, gfa_data, extname='GFA')

# remove tmp files
if args.cleanup:
    shutil.rmtree(tmp_targets_dir)
    shutil.rmtree(tmp_sky_dir)
    shutil.rmtree(tmp_gfa_dir)
    os.remove(tmp_fiber_pos)
    os.remove(tmp_fiber_sky)
else:
    print('tmp_targets_dir {}'.format(tmp_targets_dir))
    print('tmp_sky_dir {}'.format(tmp_sky_dir))
    print('tmp_gfa_dir {}'.format(tmp_gfa_dir))
