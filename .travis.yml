# We set the language to python, since we are focused on a recent python
# version and want to use the build matrix for testing different compiler
# versions.
language: python

# We use APT/brew to get as many packages as possible.  Then we pip install the
# rest of our dependencies.

matrix:
  include:
    # GCC 4.9 - this is the oldest version that has good C++11 support
    - os: linux
      dist: trusty
      sudo: false
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - build-essential
            - git
            - pkg-config
            - locales
            - libgl1-mesa-glx
            - xvfb
            - libcfitsio3-dev
            - gcc-4.9
            - g++-4.9
      env:
        - MATRIX_EVAL="export CC=$(which gcc-4.9) && export CXX=$(which g++-4.9)"
    # GCC 5 - default version for ubuntu 16.04 LTS
    - os: linux
      dist: trusty
      sudo: false
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - build-essential
            - git
            - pkg-config
            - locales
            - libgl1-mesa-glx
            - xvfb
            - libcfitsio3-dev
            - gcc-5
            - g++-5
      env:
        - MATRIX_EVAL="export CC=$(which gcc-5) && export CXX=$(which g++-5)"
    # GCC 7 - default version for ubuntu 18.04 LTS
    - os: linux
      dist: trusty
      sudo: false
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - build-essential
            - git
            - pkg-config
            - locales
            - libgl1-mesa-glx
            - xvfb
            - libcfitsio3-dev
            - gcc-7
            - g++-7
      env:
        - MATRIX_EVAL="export CC=$(which gcc-7) && export CXX=$(which g++-7)"
    - os: osx
      osx_image: xcode9.4
      language: generic
      addons:
        homebrew:
          packages:
            - git
            - cfitsio
            - python3
      env:
        - MATRIX_EVAL="export CC=$(which clang) && export CXX=$(which clang++)"

# The python versions to test.
python:
    - 3.6

# The fixed versions of python dependencies used for all python / compiler
# versions.
env:
    global:
        # Binary packages to install with pip.
        - PIP_BINARY="pyyaml scipy matplotlib numpy astropy sphinx"
        # Packages to build with pip
        - PIP_SOURCE="fitsio healpy=1.11"
        # DESI packages to install.
        - DESIUTIL_VERSION=master
        - DESIMODEL_VERSION=master
        - DESIMODEL_DATA=trunk
        - DESITARGET_VERSION=master
        - DESIHUB_PIP="desiutil=${DESIUTIL_VERSION} desimodel=${DESIMODEL_VERSION} desitarget=${DESITARGET_VERSION}"

before_install:
    # Set the C and C++ compilers
    - eval "${MATRIX_EVAL}"
    - echo "  CC = ${CC} $(${CC} -dumpversion)"
    - echo "  CXX = ${CXX} $(${CXX} -dumpversion)"
    # Install binary python dependencies.
    - pip3 install -q $PIP_BINARY
    # Install from source (use quotes here to escape colon from yaml)
    - "pip3 install --no-binary :all: $PIP_SOURCE"
    # Install DESI dependencies
    - for p in $DESIHUB_PIP; do r=$(echo $p | cut -d= -f1); v=$(echo $p | cut -d= -f2); pip3 install git+https://github.com/desihub/${r}.git@${v}#egg=${r}; done
    # Download desimodel data if we are running tests (and not just
    # checking documentation builds).
    - export DESIMODEL=${HOME}/desimodel/${DESIMODEL_VERSION}
    - mkdir -p ${DESIMODEL}
    - svn export https://desi.lbl.gov/svn/code/desimodel/${DESIMODEL_DATA}/data ${DESIMODEL}/data

# Install fiberassign

install:
    - python3 setup.py install

# Run tests

script:
    - python3 setup.py test
